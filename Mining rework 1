local DataStoreService = game:GetService("DataStoreService")
local MiningDataStore = DataStoreService:GetDataStore("MiningDataStore")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local MineEvent = ReplicatedStorage:WaitForChild("Mining")
local UpdateHealthBar = ReplicatedStorage:WaitForChild("UpdateHealthBar")

local RETRY_LIMIT = 5  -- Maximum number of retries for DataStore operations

-- Block configurations
local Blocks = {
	["Stone"] = {
		PrimaryTool = "Pickaxe",
		MaxDurability = 10,
		CashReward = 5,
		DefaultDamage = 2,
		PrimaryToolDamage = 5,
	},
	["IronOre"] = {
		PrimaryTool = "Pickaxe",
		MaxDurability = 20,
		CashReward = 10,
		DefaultDamage = 3,
		PrimaryToolDamage = 6,
	},
	-- Add more blocks as needed
}

-- Function to load player data
local function loadPlayerData(plr)
	local leaderstats = Instance.new("Folder")
	leaderstats.Name = "leaderstats"
	leaderstats.Parent = plr

	local Cash = Instance.new("NumberValue")
	Cash.Name = "Cash"
	Cash.Value = 0
	Cash.Parent = leaderstats

	local Key = tostring(plr.UserId)
	local retries = 0
	local success, errormessage

	repeat
		success, errormessage = pcall(function()
			local Data = MiningDataStore:GetAsync(Key)
			if Data and Data[1] then
				Cash.Value = Data[1]
			end
		end)
		if not success then
			retries = retries + 1
			warn("Failed to load data for player " .. plr.Name .. ": " .. errormessage)
			if retries < RETRY_LIMIT then
				wait(5)  -- Wait before retrying
			end
		end
	until success or retries >= RETRY_LIMIT
end

-- Function to save player data
local function savePlayerData(plr)
	local Key = tostring(plr.UserId)
	local retries = 0
	local success, errormessage

	repeat
		success, errormessage = pcall(function()
			MiningDataStore:SetAsync(Key, {plr.leaderstats.Cash.Value})
		end)
		if not success then
			retries = retries + 1
			warn("Failed to save data for player " .. plr.Name .. ": " .. errormessage)
			if retries < RETRY_LIMIT then
				wait(5)  -- Wait before retrying
			end
		end
	until success or retries >= RETRY_LIMIT
end

-- Load player data when they join
game.Players.PlayerAdded:Connect(loadPlayerData)

-- Save player data when they leave
game.Players.PlayerRemoving:Connect(savePlayerData)

-- Mining event handling
MineEvent.OnServerEvent:Connect(function(plr, ore, tool, isFirstClick)
	if ore and ore:IsA("BasePart") and ore:FindFirstChild("Durability") then
		local blockConfig = Blocks[ore.Name]

		if blockConfig then
			local damage = blockConfig.DefaultDamage

			if tool and tool:IsA("Tool") and tool.Name == blockConfig.PrimaryTool then
				damage = blockConfig.PrimaryToolDamage
			end

			local maxDurability = blockConfig.MaxDurability

			-- Update durability or destroy the ore
			if ore.Durability.Value <= damage then
				ore:Destroy()
				plr.leaderstats.Cash.Value = plr.leaderstats.Cash.Value + blockConfig.CashReward

				-- Clean up health bar if ore is destroyed
				local healthBarGui = ore:FindFirstChild("HealthBarGui")
				if healthBarGui then
					healthBarGui:Destroy()
					end
			else
				ore.Durability.Value = ore.Durability.Value - damage
				-- Update the health bar on the client
				UpdateHealthBar:FireClient(plr, ore, ore.Durability.Value, maxDurability)
			end
		end
	end
end)
