local DataStoreService = game:GetService("DataStoreService")
local MiningDataStore = DataStoreService:GetDataStore("MiningDataStore")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local MineEvent = ReplicatedStorage:WaitForChild("Mining")
local UpdateHealthBar = ReplicatedStorage:WaitForChild("UpdateHealthBar")

local primaryTool = "Pickaxe"  -- Primary tool's name
local RETRY_LIMIT = 5  -- Maximum number of retries for DataStore operations

-- Function to load player data
local function loadPlayerData(plr)
	local leaderstats = Instance.new("Folder")
	leaderstats.Name = "leaderstats"
	leaderstats.Parent = plr

	local Cash = Instance.new("NumberValue")
	Cash.Name = "Cash"
	Cash.Value = 0
	Cash.Parent = leaderstats

	local Key = tostring(plr.UserId)
	local retries = 0
	local success, errormessage

	repeat
		success, errormessage = pcall(function()
			local Data = MiningDataStore:GetAsync(Key)
			if Data and Data[1] then
				Cash.Value = Data[1]
			end
		end)
		if not success then
			retries = retries + 1
			warn("Failed to load data for player " .. plr.Name .. ": " .. errormessage)
			if retries < RETRY_LIMIT then
				wait(5)  -- Wait before retrying
			end
		end
	until success or retries >= RETRY_LIMIT
end

-- Function to save player data
local function savePlayerData(plr)
	local Key = tostring(plr.UserId)
	local retries = 0
	local success, errormessage

	repeat
		success, errormessage = pcall(function()
			MiningDataStore:SetAsync(Key, {plr.leaderstats.Cash.Value})
		end)
		if not success then
			retries = retries + 1
			warn("Failed to save data for player " .. plr.Name .. ": " .. errormessage)
			if retries < RETRY_LIMIT then
				wait(5)  -- Wait before retrying
			end
		end
	until success or retries >= RETRY_LIMIT
end

-- Load player data when they join
game.Players.PlayerAdded:Connect(loadPlayerData)

-- Save player data when they leave
game.Players.PlayerRemoving:Connect(savePlayerData)

-- Mining event handling
MineEvent.OnServerEvent:Connect(function(plr, ore, tool, isFirstClick)
	if ore and ore:IsA("BasePart") and ore:FindFirstChild("Durability") then
		local damage = 2  -- Default damage for non-primary tools

		if tool and tool:IsA("Tool") and tool.Name == primaryTool then
			damage = 5  -- Higher damage for primary tool
		end

		-- Ensure MaxDurability is set
		local maxDurability = ore.MaxDurability.Value -- Default value if not set

		-- Update durability or destroy the ore
		if ore.Durability.Value <= damage then
			ore:Destroy()
			plr.leaderstats.Cash.Value = plr.leaderstats.Cash.Value + 5

			-- Clean up health bar if ore is destroyed
			local healthBarGui = ore:FindFirstChild("HealthBarGui")
			if healthBarGui then
				healthBarGui:Destroy()
			end
		else
			ore.Durability.Value = ore.Durability.Value - damage
			-- Update the health bar on the client
			UpdateHealthBar:FireClient(plr, ore, ore.Durability.Value, maxDurability)
		end
	end
end)
